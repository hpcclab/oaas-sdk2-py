# This file is autogenerated by maturin v1.8.3
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

env:
  WORKING_DIRECTORY: oprc-py
  PROTOBUF_VERSION: 30.2

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: x86
          # - runner: ubuntu-24.04
          #   target: aarch64
          - runner: ubuntu-22.04
            target: armv7
          - runner: ubuntu-22.04
            target: s390x
          - runner: ubuntu-22.04
            target: ppc64le
    steps:
      - uses: actions/checkout@v4
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: ${{ env.PROTOBUF_VERSION }}
      - name: Set PROTOC environment variable
        run: |
          echo "PROTOC=$(which protoc 2>/dev/null || where protoc 2>/dev/null)" >> $GITHUB_ENV
          echo "PROTOC_VERSION=${{ env.PROTOBUF_VERSION }}" >> $GITHUB_ENV
          echo "Protoc location: $(which protoc 2>/dev/null || where protoc 2>/dev/null)"
          echo "Protoc version:"
          protoc --version
      - name: Setup GCC
        uses: egor-tensin/setup-gcc@v1.3
      - uses: actions/setup-python@v5
        with:
          python-version: |
            3.11
            3.12
            3.13
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          before-script-linux: |
            which unzip || apt install unzip || echo "not apt"
            which unzip || yum install unzip || echo "not yum"
            which unzip
            PROTOC=protoc-${{ env.PROTOBUF_VERSION }}-linux-x86_64.zip
            if [ "$(arch)" == "i686" ]; then PROTOC=protoc-${{ env.PROTOBUF_VERSION }}-linux-x86_32.zip; fi
            curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v${{ env.PROTOBUF_VERSION }}/$PROTOC
            unzip $PROTOC -d protoc3
            mv -v protoc3/bin/* /usr/local/bin/
            mv -v protoc3/include/* /usr/local/include/
          manylinux: auto
          working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: ${{ env.WORKING_DIRECTORY }}/dist

  # musllinux:
  #   runs-on: ${{ matrix.platform.runner }}
  #   strategy:
  #     matrix:
  #       platform:
  #         - runner: ubuntu-22.04
  #           target: x86_64
  #         - runner: ubuntu-22.04
  #           target: x86
  #         - runner: ubuntu-22.04
  #           target: aarch64
  #         - runner: ubuntu-22.04
  #           target: armv7
  #   steps:
  #     - uses: actions/checkout@v4
        # - name: Install Protoc
        #   uses: arduino/setup-protoc@v3
        #   with:
        #     repo-token: ${{ secrets.GITHUB_TOKEN }}
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.x
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
  #         manylinux: musllinux_1_2
  #         working-directory: ${{ env.WORKING_DIRECTORY }}
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-musllinux-${{ matrix.platform.target }}
  #         path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: ${{ env.PROTOBUF_VERSION }}
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: ${{ env.WORKING_DIRECTORY }}/dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: ${{ env.PROTOBUF_VERSION }}
      - name: Set PROTOC environment variable
        run: |
          echo "PROTOC=$(which protoc 2>/dev/null || where protoc 2>/dev/null)" >> $GITHUB_ENV
          echo "PROTOC_VERSION=${{ env.PROTOBUF_VERSION }}" >> $GITHUB_ENV
          echo "Protoc location: $(which protoc 2>/dev/null || where protoc 2>/dev/null)"
          echo "Protoc version:"
          protoc --version
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: ${{ env.WORKING_DIRECTORY }}/dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          working-directory: ${{ env.WORKING_DIRECTORY }}
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: ${{ env.WORKING_DIRECTORY }}/dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      # - name: Generate artifact attestation
      #   uses: actions/attest-build-provenance@v2
      #   with:
      #     subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
          # working-directory: ${{ env.WORKING_DIRECTORY }}
